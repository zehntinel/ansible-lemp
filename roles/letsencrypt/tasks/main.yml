---
- name: Create cert domain directory
  file:
    path: "{{ letsencrypt.certificates_directory }}/{{ domain_name }}"
    state: directory
    owner: www-data
    group: www-data
    mode: 0750

- name: Create web domain acme-challenge directory
  file:
    path: "/var/www/{{ domain_name }}/.well-known/acme-challenge"
    state: directory
    owner: root
    group: root
    mode: 0755

# generate account key, if necessary
- name: Find account.key
  stat:
    path: "{{ letsencrypt.certificates_directory }}/{{ domain_name }}/account.key"
  register: account_key
  become: no
  run_once: true 

- name: "Generate a Let's Encrypt account key"
  shell: openssl genrsa 4096 > "{{ letsencrypt.certificates_directory }}/{{ domain_name }}/account.key"
  become: no
  run_once: true
  when: account_key.stat.exists == False

# generate domain key, if necessary
- name: Find domain.key
  stat:
    path: "{{ letsencrypt.certificates_directory }}/{{ domain_name }}/domain.key"
  register: domain_key
  become: no
  run_once: true

- name: Generate domain.key
  shell: openssl genrsa 4096 > "{{ letsencrypt.certificates_directory }}/{{ domain_name }}/domain.key"
  become: no
  run_once: true
  when: domain_key.stat.exists == False

  # generate domain csr, if necessary
- name: Find domain.csr
  stat:
    path: "{{ letsencrypt.certificates_directory }}/{{ domain_name }}/domain.csr"
  register: domain_csr
  become: no
  run_once: true


- name: Generate domain.csr
  shell: openssl req -new -sha256 -key "{{ letsencrypt.certificates_directory }}/{{ domain_name }}/domain.key" -subj "/CN={{ domain_name }}" > "{{ letsencrypt.certificates_directory }}/{{ domain_name }}/domain.csr"
  become: no
  run_once: true
  when: domain_csr.stat.exists == False

- name: Create a challenge using a account key file.
  acme_certificate:
    account_key_src: "{{ letsencrypt.certificates_directory }}/{{ domain_name }}/account.key"
    csr: "{{ letsencrypt.certificates_directory }}/{{ domain_name }}/domain.csr"
    dest: "{{ letsencrypt.certificates_directory }}/{{ domain_name }}/signed.crt"
    fullchain_dest: "{{ letsencrypt.certificates_directory }}/{{ domain_name }}/combined.pem"
  register: create_challenge

- name: "Implement http-01 challenge files"
  copy:
      dest: "/var/www/{{ domain_name }}/{{ create_challenge['challenge_data']['adrian-galicia.dev']['http-01']['resource']}}"
      content: "{{ create_challenge['challenge_data']['adrian-galicia.dev']['http-01']['resource_value'] }}"
  with_items:
    - "{{ domain_name }}"
  when: create_challenge is changeds  

- name: Let the challenge be validated and retrieve the cert and intermediate certificate
  acme_certificate:
    account_key_src: "{{ letsencrypt.certificates_directory }}/{{ domain_name }}/account.key"
    csr: "{{ letsencrypt.certificates_directory }}/{{ domain_name }}/domain.csr"
    dest: "{{ letsencrypt.certificates_directory }}/{{ domain_name }}/signed.crt"
    fullchain_dest: "{{ letsencrypt.certificates_directory }}/{{ domain_name }}/fullchain.pem"
    chain_dest: "{{ letsencrypt.certificates_directory }}/{{ domain_name }}/intermediate.crt"
    data: "{{ create_challenge }}"

- name: Create Nginx secure virtual host
  template:
    src: secure_virtual_host.j2
    dest: /etc/nginx/sites-enabled/{{ domain_name }}.conf
  notify: 
   - restart nginx

- name: Allow UFW Nginx Full
  ufw:
    rule: allow
    name: "Nginx Full"